import sys
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLineEdit, QListWidget, QListWidgetItem, QMessageBox
)
from PyQt6.QtCore import Qt

class ToDoApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("代辦清單")
        self.setGeometry(100, 100, 400, 300)

        self.layout = QVBoxLayout()

        # Input field and add button
        self.input_layout = QHBoxLayout()
        self.task_input = QLineEdit()
        self.task_input.setPlaceholderText("輸入新任務...")
        self.add_button = QPushButton("新增任務")
        self.add_button.clicked.connect(self.add_task)
        self.input_layout.addWidget(self.task_input)
        self.input_layout.addWidget(self.add_button)

        # Task list
        self.task_list = QListWidget()

        # Buttons for managing tasks
        self.button_layout = QHBoxLayout()
        self.delete_button = QPushButton("刪除任務")
        self.delete_button.clicked.connect(self.delete_task)
        self.mark_done_button = QPushButton("標記為完成")
        self.mark_done_button.clicked.connect(self.mark_task_done)
        self.button_layout.addWidget(self.delete_button)
        self.button_layout.addWidget(self.mark_done_button)

        # Adding layouts to the main layout
        self.layout.addLayout(self.input_layout)
        self.layout.addWidget(self.task_list)
        self.layout.addLayout(self.button_layout)

        self.setLayout(self.layout)

    def add_task(self):
        task = self.task_input.text().strip()
        if not task:
            QMessageBox.warning(self, "警告", "任務內容不能為空！")
            return

        for i in range(self.task_list.count()):
            if self.task_list.item(i).text() == task:
                QMessageBox.warning(self, "警告", "任務已存在，請勿重複輸入！")
                return

        item = QListWidgetItem(task)
        self.task_list.addItem(item)
        self.task_input.clear()

    def delete_task(self):
        selected_items = self.task_list.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "警告", "未選擇要刪除的任務！")
            return
        for item in selected_items:
            self.task_list.takeItem(self.task_list.row(item))

    def mark_task_done(self):
        selected_items = self.task_list.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "警告", "未選擇要標記的任務！")
            return
        for item in selected_items:
            font = item.font()
            font.setStrikeOut(True)
            item.setFont(font)
            item.setForeground(Qt.GlobalColor.gray)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ToDoApp()
    window.show()
    sys.exit(app.exec())
